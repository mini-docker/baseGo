syntax = "proto3";

package goim.logic;

option go_package = "grpc";

import "baseGo/src/imserver/api/comet/grpc/api.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

message PushMsg {
    enum Type {
        PUSH = 0;
        ROOM = 1;
        BROADCAST = 2;
    }
    // 发送类型
    Type type = 1;
    // 操作类型
    int32 operation = 2;
    // 房间id
    int32 RoomId = 3;
    // 发送人id
    int32 mid = 4;
    // 发送时间
    int32 sendTime = 5;
    int32 msgType = 6;
    bytes Msg = 7;
    enum IsDel {
        NO = 0;
        YES = 1;
    }
    IsDel isDel = 8;
    int32 MsgId = 9;
    int32 speed = 10;
    string server = 11;
    // 接收人
    int32 receiverId = 12;
    string senderName = 13;
    string senderHead = 14;
    int64 senderLevel = 15;
    string senderLevelPhoto = 16;
    int32 receiveType = 17;
    string account = 18;
    string lineId = 19;
    string agencyId = 20;
}

message CloseReply {
}

message CloseReq {
}

message PingReply {
}

message PingReq {
}

message ConnectReq {
    option (gogoproto.goproto_stringer) = false;
    string server = 1;
    string cookie = 2;
    bytes token = 3;
}

message ConnectReply {
    int64 mid = 1;
    string key = 2;
    string roomID = 3;
    repeated int32 accepts = 4;
    int64 heartbeat = 5;
}

message DisconnectReq {
    int64 mid = 1;
    string key = 2;
    string server = 3;
}

message DisconnectReply {
    bool has = 1;
}

message HeartbeatReq {
    int64 mid = 1;
    string key = 2;
    string server = 3;
}

message HeartbeatReply {
}

message OnlineReq {
    option (gogoproto.goproto_stringer) = false;
    string server = 1;
    map<string, int32> roomCount = 2;
}

message OnlineReply {
    option (gogoproto.goproto_stringer) = false;
    map<string, int32> allRoomCount = 1;
}

message ReceiveReq {
    int64 mid = 1;
    comet.Proto proto = 2;
}

message ReceiveReply {
}

message NodesReq {
	string platform = 1;
	string clientIP = 2;
}

message NodesReply {
	string domain = 1 [(gogoproto.jsontag) = "domain"];
	int32 tcpPort = 2 [(gogoproto.jsontag) = "tcp_port"];
	int32 wsPort = 3 [(gogoproto.jsontag) = "ws_port"];
	int32 wssPort = 4 [(gogoproto.jsontag) = "wss_port"];
	int32 heartbeat = 5 [(gogoproto.jsontag) = "heartbeat"];
	repeated string nodes = 6 [(gogoproto.jsontag) = "nodes"];
	Backoff backoff = 7 [(gogoproto.jsontag) = "backoff"];
	int32 heartbeatMax = 8 [(gogoproto.jsontag) = "heartbeat_max"];
}

message Backoff {
	int32	MaxDelay = 1 [(gogoproto.jsontag) = "max_delay"];
	int32	BaseDelay = 2 [(gogoproto.jsontag) = "base_delay"];
	float	Factor = 3 [(gogoproto.jsontag) = "factor"];
	float	Jitter = 4 [(gogoproto.jsontag) = "jitter"];
}

message JoinRoomReq {

    int64 userId = 1;
    Base base = 2;

}
message JoinRoomeResp {
    bool result = 1;
    string tokken = 2;
    string roomID = 3;
    repeated string rooms = 4;

}
message Base{
    string tokken = 1;
    string server = 2;
    string lineId = 3;
    string agencyId = 4;
}
message EstablishConnReq {
    int64 userId = 1;
    Base base = 2;


}
message EstablishConnResp {
    int64 mid = 1;
    string key = 2;
    string roomID = 3;
    repeated int32 accepts = 4;
    int64 heartbeat = 5;
    bool result = 6;
    repeated string rooms = 7;

}
service Logic {
    // Ping Service 
    rpc Ping(PingReq) returns(PingReply);
    // Close Service 
    rpc Close(CloseReq) returns(CloseReply);
    // Connect
    rpc Connect(ConnectReq) returns (ConnectReply);
    // Disconnect
    rpc Disconnect(DisconnectReq) returns (DisconnectReply);
    // Heartbeat
    rpc Heartbeat(HeartbeatReq) returns (HeartbeatReply);
    // RenewOnlineapi.pb.go
    rpc RenewOnline(OnlineReq) returns (OnlineReply);
    // Receive
    rpc Receive(ReceiveReq) returns (ReceiveReply);
	//ServerList
	rpc Nodes(NodesReq) returns (NodesReply);
    // 建立连接
    rpc EstablishConn (EstablishConnReq) returns (EstablishConnResp);
    // 进入房间
    rpc JoinRoom (JoinRoomReq) returns (JoinRoomeResp);
}
